/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.28.0
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import { Interface, Contract } from 'fuels';
import type { Provider, BaseWalletLocked, AbstractAddress } from 'fuels';
import type { RegistryContractAbi, RegistryContractAbiInterface } from '../RegistryContractAbi';

const _abi = {
  types: [
    {
      typeId: 0,
      type: '()',
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: 'b256',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: 'bool',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: 'enum Error',
      components: [
        {
          name: 'UnorderedTokens',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'AlreadyInitialized',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'AlreadyRegistered',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'InvalidContractCode',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'PoolInitialized',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: 'enum Option',
      components: [
        {
          name: 'None',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'Some',
          type: 5,
          typeArguments: null,
        },
      ],
      typeParameters: [5],
    },
    {
      typeId: 5,
      type: 'generic T',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: 'exchange_id',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'add_exchange_contract',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [],
      name: 'exchange_contract_root',
      output: {
        name: '',
        type: 1,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_a',
          type: 1,
          typeArguments: null,
        },
        {
          name: 'token_b',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'get_exchange_contract',
      output: {
        name: '',
        type: 4,
        typeArguments: [
          {
            name: '',
            type: 1,
            typeArguments: null,
          },
        ],
      },
    },
    {
      inputs: [
        {
          name: 'template_exchange_id',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'initialize',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'addr',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'is_pool',
      output: {
        name: '',
        type: 2,
        typeArguments: null,
      },
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
};

export class RegistryContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): RegistryContractAbiInterface {
    return new Interface(_abi) as unknown as RegistryContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): RegistryContractAbi {
    return new Contract(id, _abi, walletOrProvider) as unknown as RegistryContractAbi;
  }
}
