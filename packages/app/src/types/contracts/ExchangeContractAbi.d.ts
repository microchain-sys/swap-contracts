/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.28.0
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Enum } from './common';

export type ErrorInput = Enum<{
  AlreadyInitialized: [];
  InsufficentOutput: [];
  InsufficentLiquidity: [];
  InsufficentInput: [];
  Invariant: [];
  InsufficentLiquidityMinted: [];
  InsufficentLiquidityBurned: [];
  MustBeCalledByVault: [];
  TWAPOutOfRange: [];
}>;
export type ErrorOutput = ErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput; ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput; ContractId: ContractIdOutput }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type FeeInfoInput = {
  current_fee: BigNumberish;
  change_rate: BigNumberish;
  update_time: BigNumberish;
};
export type FeeInfoOutput = { current_fee: number; change_rate: number; update_time: number };
export type LiquidityAddedInput = {
  sender: string;
  amount_0: BigNumberish;
  amount_1: BigNumberish;
  lp_tokens: BigNumberish;
  recipient: string;
};
export type LiquidityAddedOutput = {
  sender: string;
  amount_0: BN;
  amount_1: BN;
  lp_tokens: BN;
  recipient: string;
};
export type LiquidityRemovedInput = {
  sender: string;
  amount_0: BigNumberish;
  amount_1: BigNumberish;
  lp_tokens: BigNumberish;
  recipient: string;
};
export type LiquidityRemovedOutput = {
  sender: string;
  amount_0: BN;
  amount_1: BN;
  lp_tokens: BN;
  recipient: string;
};
export type ObservationInput = {
  timestamp: BigNumberish;
  price_0_cumulative_last: U256Input;
  price_1_cumulative_last: U256Input;
};
export type ObservationOutput = {
  timestamp: BN;
  price_0_cumulative_last: U256Output;
  price_1_cumulative_last: U256Output;
};
export type PoolInfoInput = {
  token_0_reserve: BigNumberish;
  token_1_reserve: BigNumberish;
  lp_token_supply: BigNumberish;
};
export type PoolInfoOutput = { token_0_reserve: BN; token_1_reserve: BN; lp_token_supply: BN };
export type ProtocolFeeCollectedInput = {
  sender: string;
  amount_0: BigNumberish;
  amount_1: BigNumberish;
};
export type ProtocolFeeCollectedOutput = { sender: string; amount_0: BN; amount_1: BN };
export type ProtocolFeeWithdrawnInput = { amount_0: BigNumberish; amount_1: BigNumberish };
export type ProtocolFeeWithdrawnOutput = { amount_0: BN; amount_1: BN };
export type RemoveLiquidityInfoInput = {
  token_0_amount: BigNumberish;
  token_1_amount: BigNumberish;
};
export type RemoveLiquidityInfoOutput = { token_0_amount: BN; token_1_amount: BN };
export type SwapInput = {
  sender: string;
  amount_0_in: BigNumberish;
  amount_1_in: BigNumberish;
  amount_0_out: BigNumberish;
  amount_1_out: BigNumberish;
  recipient: string;
};
export type SwapOutput = {
  sender: string;
  amount_0_in: BN;
  amount_1_in: BN;
  amount_0_out: BN;
  amount_1_out: BN;
  recipient: string;
};
export type TWAPInfoInput = {
  current_element: BigNumberish;
  buffer_size: BigNumberish;
  next_buffer_size: BigNumberish;
};
export type TWAPInfoOutput = { current_element: BN; buffer_size: BN; next_buffer_size: BN };
export type U256Input = { a: BigNumberish; b: BigNumberish; c: BigNumberish; d: BigNumberish };
export type U256Output = { a: BN; b: BN; c: BN; d: BN };
export type UpdateReservesInput = { amount_0: BigNumberish; amount_1: BigNumberish };
export type UpdateReservesOutput = { amount_0: BN; amount_1: BN };
export type VaultInfoInput = {
  vault: string;
  token0_protocol_fees_collected: BigNumberish;
  token1_protocol_fees_collected: BigNumberish;
  current_fee: BigNumberish;
  change_rate: BigNumberish;
  update_time: BigNumberish;
};
export type VaultInfoOutput = {
  vault: string;
  token0_protocol_fees_collected: BN;
  token1_protocol_fees_collected: BN;
  current_fee: number;
  change_rate: number;
  update_time: number;
};

interface ExchangeContractAbiInterface extends Interface {
  functions: {
    add_liquidity: FunctionFragment;
    cache_vault_fees: FunctionFragment;
    expand_twap_buffer: FunctionFragment;
    get_fee_info: FunctionFragment;
    get_observation: FunctionFragment;
    get_pool_info: FunctionFragment;
    get_tokens: FunctionFragment;
    get_twap_info: FunctionFragment;
    get_vault_info: FunctionFragment;
    initialize: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap: FunctionFragment;
    withdraw_protocol_fees: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'add_liquidity', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'cache_vault_fees', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'expand_twap_buffer', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_fee_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_observation', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_pool_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_tokens', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_twap_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_vault_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_liquidity', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [BigNumberish, BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'withdraw_protocol_fees',
    values: [IdentityInput]
  ): Uint8Array;

  decodeFunctionData(functionFragment: 'add_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'cache_vault_fees', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'expand_twap_buffer', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_fee_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_observation', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_pool_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_tokens', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_twap_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_vault_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw_protocol_fees', data: BytesLike): DecodedValue;
}

export class ExchangeContractAbi extends Contract {
  interface: ExchangeContractAbiInterface;
  functions: {
    add_liquidity: InvokeFunction<[recipient: IdentityInput], BN>;
    cache_vault_fees: InvokeFunction<[], void>;
    expand_twap_buffer: InvokeFunction<[new_total_slots: BigNumberish], void>;
    get_fee_info: InvokeFunction<[], FeeInfoOutput>;
    get_observation: InvokeFunction<[slot: BigNumberish], ObservationOutput>;
    get_pool_info: InvokeFunction<[], PoolInfoOutput>;
    get_tokens: InvokeFunction<[], [string, string]>;
    get_twap_info: InvokeFunction<[], TWAPInfoOutput>;
    get_vault_info: InvokeFunction<[], VaultInfoOutput>;
    initialize: InvokeFunction<[new_vault: string], void>;
    remove_liquidity: InvokeFunction<[recipient: IdentityInput], RemoveLiquidityInfoOutput>;
    swap: InvokeFunction<
      [amount_0_out: BigNumberish, amount_1_out: BigNumberish, recipient: IdentityInput],
      void
    >;
    withdraw_protocol_fees: InvokeFunction<[recipient: IdentityInput], [BN, BN]>;
  };
}
